CREATE LOCATION 

DELIMITER //

CREATE PROCEDURE CreateLocation(
    IN locType ENUM('Head', 'Branch'),
    IN cap INT,
    IN name VARCHAR(100),
    IN addrID INT,
    IN phone VARCHAR(15),
    IN web VARCHAR(100)
)
BEGIN
    IF locType = 'Head' AND EXISTS (SELECT 1 FROM Locations WHERE locationType = 'Head') THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'A Head location already exists.';
    ELSE
        INSERT INTO Locations (locationType, maxCapacity, locationName, addressID, telephoneNo, webAddress)
        VALUES (locType, cap, name, addrID, phone, web);
    END IF;
END //

DELIMITER ;



DELETE LOCATION 

DELIMITER //

CREATE PROCEDURE DeleteLocation(IN locID INT)
BEGIN
    DELETE FROM Locations WHERE locationID = locID;
END //

DELIMITER ;


EDIT LOCATION

DELIMITER //

CREATE PROCEDURE EditLocation(
    IN locID INT,
    IN newType ENUM('Head', 'Branch'),
    IN newCap INT,
    IN newName VARCHAR(100),
    IN newAddrID INT,
    IN newPhone VARCHAR(15),
    IN newWeb VARCHAR(100)
)
BEGIN
    IF newType = 'Head' AND EXISTS (
        SELECT 1 FROM Locations WHERE locationType = 'Head' AND locationID != locID
    ) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Another Head location already exists.';
    ELSE
        UPDATE Locations
        SET locationType = newType,
            maxCapacity = newCap,
            locationName = newName,
            addressID = newAddrID,
            telephoneNo = newPhone,
            webAddress = newWeb
        WHERE locationID = locID;
    END IF;
END //

DELIMITER ;


DISPLAY ALL LOCATIONS
DELIMITER //

CREATE PROCEDURE DisplayLocations()
BEGIN
    SELECT L.*, A.address, A.city, A.province, A.postalCode
    FROM Locations L
    JOIN Addresses A ON L.addressID = A.addressID;
END //

DELIMITER ;


CREATE PERSONNEL 
-- Create a Personnel (add to the People table first, then reference it in the Personnel table)
-- Assuming you already have a person added (let's say generalID = 1)
INSERT INTO Personnel (generalID)
VALUES (1);


DELETE PERSONNEL
-- Delete a Personnel (assuming personnelID = 1)
DELETE FROM Personnel
WHERE personnelID = 1;

EDIT PERSONNEL
-- Edit a Personnel (update generalID, assuming personnelID = 1)
UPDATE Personnel
SET generalID = 2  -- Change to a different generalID
WHERE personnelID = 1;

DISPLAY PERSONNEL
-- Display a Personnel (display personnel with personnelID = 1)
SELECT * FROM Personnel
WHERE personnelID = 1;






-- Trigger to enforce a single Head location
CREATE TRIGGER enforceSingleHeadLocation
BEFORE INSERT ON Locations
FOR EACH ROW
BEGIN
    IF NEW.locationType = 'Head' THEN
        IF (SELECT COUNT(*) FROM Locations WHERE locationType = 'Head') > 0 THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'There can only be one Head location in the system.';
        END IF;
    END IF;
END //

-- Procedure to assign personnel to a location with roles, mandates, and dates
CREATE PROCEDURE assignPersonnelToLocation(
    IN pPersonnelID INT,
    IN pLocationID INT,
    IN pStartDate DATE,
    IN pEndDate DATE,
    IN pPersonnelRole ENUM('General Manager', 'Deputy Manager', 'Treasurer', 'Secretary', 'Administrator', 'Coach', 'Assistant Coach', 'Other'),
    IN pMandate ENUM('Volunteer', 'Paid')
)
BEGIN
    -- Insert or update personnel assignment
    INSERT INTO PersonnelLocationAssignments (personnelID, locationID, startDate, endDate, personnelRole, mandate)
    VALUES (pPersonnelID, pLocationID, pStartDate, pEndDate, pPersonnelRole, pMandate)
    ON DUPLICATE KEY UPDATE 
        startDate = pStartDate,
        endDate = pEndDate,
        personnelRole = pPersonnelRole,
        mandate = pMandate;
END //

-- Procedure to ensure at least one General Manager at the Head location
CREATE PROCEDURE enforceGeneralManagerAtHeadLocation()
BEGIN
    DECLARE headLocationCount INT;
    DECLARE gmCount INT;

    -- Check if there is exactly one Head location
    SELECT COUNT(*) INTO headLocationCount
    FROM Locations
    WHERE locationType = 'Head';

    IF headLocationCount != 1 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'There must be exactly one Head location in the system.';
    END IF;

    -- Ensure at least one General Manager exists at the Head location
    SELECT COUNT(*) INTO gmCount
    FROM PersonnelLocationAssignments AS pla
    JOIN Personnel AS p ON pla.personnelID = p.personnelID
    WHERE pla.locationID = (SELECT locationID FROM Locations WHERE locationType = 'Head') 
      AND pla.personnelRole = 'General Manager' 
      AND (pla.endDate IS NULL OR pla.endDate > CURDATE());

    IF gmCount = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'There must be at least one General Manager at the Head location.';
    END IF;
END //

-- Trigger to enforce personnel role at Head location
CREATE TRIGGER enforceHeadLocationPersonnelRoles
BEFORE INSERT ON PersonnelLocationAssignments
FOR EACH ROW
BEGIN
    -- Ensure certain roles are only assigned to Head location
    IF NEW.locationID = (SELECT locationID FROM Locations WHERE locationType = 'Head') THEN
        IF NEW.personnelRole NOT IN ('General Manager', 'Deputy Manager', 'Treasurer', 'Secretary', 'Administrator') THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Only General Manager, Deputy Manager, Treasurer, Secretary, or Administrator can be assigned to the Head location.';
        END IF;
    END IF;
END //

-- Check if the club can operate: Head location, General Manager, and Administrator required
CREATE PROCEDURE checkClubOperation()
BEGIN
    DECLARE headLocationCount INT;
    DECLARE personnelCount INT;
    DECLARE adminCount INT;

    -- Check if there is at least one Head location
    SELECT COUNT(*) INTO headLocationCount FROM Locations WHERE locationType = 'Head';
    IF headLocationCount = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'The club cannot operate without a Head location.';
    END IF;

    -- Check if there is at least one General Manager
    SELECT COUNT(*) INTO personnelCount FROM PersonnelLocationAssignments AS pla
    WHERE pla.personnelRole = 'General Manager' 
      AND pla.endDate IS NULL;
    IF personnelCount = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'The club cannot operate without a General Manager.';
    END IF;

    -- Check if there is at least one Administrator
    SELECT COUNT(*) INTO adminCount FROM PersonnelLocationAssignments AS pla
    WHERE pla.personnelRole = 'Administrator' 
      AND pla.endDate IS NULL;
    IF adminCount = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'The club cannot operate without at least one Administrator.';
    END IF;
END //

DELIMITER ;



NEW CONTRACT
DELIMITER //

CREATE PROCEDURE newContract(
	IN pPersonnelID INT,
	IN pLocationID INT,
	IN pStartDate DATE,
	IN pRole ENUM('General Manager', 'Deputy Manager', 'Administrator', 'Coach', 'Assisant Coach', 'Other'),
	IN pMandate ENUM('Volunteer', 'Paid')
)
BEGIN
	DECLARE numActiveContracts INT;

	-- End any current active contracts with different details
	UPDATE Contracts
	SET endDate = CURDATE()
	WHERE personnelID = pPersonnelID
	AND endDate IS NULL
	AND (locationID != pLocationID OR personnelRole != pRole OR mandate != pMandate);

	-- Insert new contract
	INSERT INTO Contracts(personnelID, locationID, startDate, personnelRole, mandate)
	VALUES (pPersonnelID, pLocationID, pStartDate, pRole, pMandate);
END //

DELIMITER ;


TERMINATE CONTRACT 
DELIMITER //

CREATE PROCEDURE terminateContract(IN pPersonnelID INT)
BEGIN
	UPDATE Contracts
	SET endDate = CURDATE()
	WHERE personnelID = pPersonnelID
	AND endDate IS NULL;
END //

DELIMITER ;



-- Create a trigger to enforce a maximum of 2 team formations per session
DELIMITER $$

CREATE TRIGGER check_team_formations_limit
BEFORE INSERT ON TeamFormations
FOR EACH ROW
BEGIN
    -- Declare a variable to store the count of team formations for the session
    DECLARE formation_count INT;

    -- Count the number of team formations for the given session ID
    SELECT COUNT(*)
    INTO formation_count
    FROM TeamFormations
    WHERE sessionID = NEW.sessionID;

    -- If there are already 2 team formations for the session, raise an error
    IF formation_count >= 2 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Cannot add more than 2 team formations for a single session.';
    END IF;
END$$

DELIMITER ;




DELIMITER $$

CREATE TRIGGER trg_validate_formation_time_conflict
BEFORE INSERT ON FormationEnrollments
FOR EACH ROW
BEGIN
    DECLARE new_session_time DATETIME;
    DECLARE new_session_date DATE;

    -- Get start time of the session for the new formation
    SELECT s.startTime, DATE(s.startTime) INTO new_session_time, new_session_date
    FROM TeamFormations tf
    JOIN Sessions s ON tf.sessionID = s.sessionID
    WHERE tf.formationID = NEW.formationID;

    -- Check for time conflicts with other formations the same player is enrolled in
    IF EXISTS (
        SELECT 1
        FROM FormationEnrollments fe
        JOIN TeamFormations tf2 ON fe.formationID = tf2.formationID
        JOIN Sessions s2 ON tf2.sessionID = s2.sessionID
        WHERE fe.clubMemberNo = NEW.clubMemberNo
          AND DATE(s2.startTime) = new_session_date
          AND ABS(TIMESTAMPDIFF(MINUTE, s2.startTime, new_session_time)) < 180
    ) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Cannot enroll player: session times are less than 3 hours apart on the same day.';
    END IF;
END$$

DELIMITER ;


DELIMITER $$

CREATE TRIGGER trg_validate_location_and_gender
BEFORE INSERT ON FormationEnrollments
FOR EACH ROW
BEGIN
    DECLARE member_location INT;
    DECLARE team_location INT;
    DECLARE member_gender CHAR(1);
    DECLARE team_gender CHAR(1);

    -- Get the club member's location
    SELECT locationID INTO member_location
    FROM PlayingAt
    WHERE clubMemberNo = NEW.clubMemberNo;

    -- Get the team location and gender via the formation
    SELECT t.locationID, t.gender INTO team_location, team_gender
    FROM TeamFormations tf
    JOIN Teams t ON tf.teamName = t.teamName
    WHERE tf.formationID = NEW.formationID;

    -- Get the club member's gender
    SELECT gender INTO member_gender
    FROM ClubMembers
    WHERE clubMemberNo = NEW.clubMemberNo;

    -- Check for nulls
    IF member_location IS NULL THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Club member has no assigned location.';
    END IF;

    IF member_gender IS NULL THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Club member has no assigned gender.';
    END IF;

    IF team_location IS NULL OR team_gender IS NULL THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Team information is missing for the formation.';
    END IF;

    -- Check location match
    IF member_location != team_location THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Cannot enroll player: location mismatch between team and club member.';
    END IF;

    -- Check gender match
    IF member_gender != team_gender THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Cannot enroll player: gender mismatch between team and club member.';
    END IF;

END$$

DELIMITER ;





-- Addresses
INSERT INTO Addresses (address, city, province, postalCode) VALUES
('123 Main St', 'Montreal', 'Quebec', 'H1A 1A1'),
('456 Elm St', 'Laval', 'Quebec', 'H2B 2B2'),
('789 Oak St', 'Montreal', 'Quebec', 'H3C 3C3'),
('101 Pine St', 'Quebec City', 'Quebec', 'G1A 1A1'),
('202 Maple St', 'Longueuil', 'Quebec', 'J4K 2B3'),
('303 Birch St', 'Montreal', 'Quebec', 'H4E 4E4'),
('404 Cedar St', 'Laval', 'Quebec', 'H7L 5N9'),
('505 Cherry St', 'Quebec City', 'Quebec', 'G2E 5E5'),
('606 Walnut St', 'Trois-Rivières', 'Quebec', 'G9A 6A6'),
('707 Pine Ave', 'Sherbrooke', 'Quebec', 'J1H 7T7');

-- People
INSERT INTO People (sin, medicareNo, dob, firstName, lastName, telephoneNo, email, addressID) VALUES
('123-45-6789', 'M123456789', '1980-04-12', 'John', 'Doe', '514-123-4567', 'john.doe@email.com', 1),
('987-65-4321', 'M987654321', '1990-06-22', 'Jane', 'Smith', '450-987-6543', 'jane.smith@email.com', 2),
('555-22-6677', 'M555667788', '1985-09-15', 'Mark', 'Johnson', '514-222-3333', 'mark.johnson@email.com', 3),
('666-33-7788', 'M667788990', '1995-11-04', 'Alice', 'Brown', '514-333-4444', 'alice.brown@email.com', 4),
('777-44-8899', 'M778899112', '1987-02-17', 'David', 'Davis', '450-444-5555', 'david.davis@email.com', 5),
('888-55-9900', 'M889900223', '2000-03-25', 'Sophia', 'Williams', '514-555-6666', 'sophia.williams@email.com', 6),
('999-66-0001', 'M990011334', '1998-01-10', 'Benjamin', 'Miller', '450-666-7777', 'benjamin.miller@email.com', 7),
('000-77-1112', 'M000223445', '1992-07-30', 'Emily', 'Davis', '514-777-8888', 'emily.davis@email.com', 8),
('111-88-2223', 'M112233556', '1988-05-19', 'Charles', 'Garcia', '450-888-9999', 'charles.garcia@email.com', 9),
('222-99-3334', 'M223344667', '2001-09-12', 'Olivia', 'Martinez', '514-999-0000', 'olivia.martinez@email.com', 10);

-- Personnel
INSERT INTO Personnel (generalID) VALUES
(1), (2), (3), (4), (5);

-- FamilyMembers
INSERT INTO FamilyMembers (generalID) VALUES
(6), (7), (8), (9), (10);

-- SecondaryFamMembers
INSERT INTO SecondaryFamMembers (telephoneNo, firstName, lastName) VALUES
('514-123-4567', 'Lucas', 'Brown'),
('450-987-6543', 'Megan', 'Smith'),
('514-222-3333', 'Oliver', 'Johnson'),
('514-333-4444', 'Sarah', 'Brown'),
('450-444-5555', 'Chris', 'Davis');

-- PrimFamSecFamRelationship
INSERT INTO PrimFamSecFamRelationship (famMemberID, secondaryFamID) VALUES
(1, 1), (2, 2), (3, 3), (4, 4), (5, 5);

-- ClubMembers
INSERT INTO ClubMembers (generalID, height, weight, gender) VALUES
(1, 160, 55, 'M'),
(2, 170, 60, 'F'),
(3, 180, 75, 'M'),
(4, 165, 50, 'F'),
(5, 175, 68, 'M');

-- ClubMemFamRelationship
INSERT INTO ClubMemFamRelationship (clubMemberNo, famMemberID, relationship) VALUES
(1, 1, 'Mother'),
(2, 2, 'Father'),
(3, 3, 'Sibling'),
(4, 4, 'Partner'),
(5, 5, 'Friend');

-- Locations
INSERT INTO Locations (locationType, maxCapacity, locationName, addressID, telephoneNo, webAddress) VALUES
('Head', 100, 'Head Office', 1, '514-123-4567', 'www.myvc-head.com'),
('Branch', 50, 'Laval Branch', 2, '450-987-6543', 'www.myvc-laval.com'),
('Branch', 60, 'Montreal East Branch', 3, '514-222-3333', 'www.myvc-east.com'),
('Branch', 80, 'Quebec City Branch', 4, '450-444-5555', 'www.myvc-qc.com'),
('Branch', 70, 'Sherbrooke Branch', 5, '514-555-6666', 'www.myvc-sherbrooke.com');

-- PlayingAt
INSERT INTO PlayingAt (clubMemberNo, locationID) VALUES
(1, 1), (2, 2), (3, 3), (4, 4), (5, 5);

-- Teams
INSERT INTO Teams (teamName, captainMemberNo, locationID, gender) VALUES
('Team A', 1, 1, 'M'),
('Team B', 2, 2, 'F'),
('Team C', 3, 3, 'M'),
('Team D', 4, 4, 'F'),
('Team E', 5, 5, 'M');

-- Sessions
INSERT INTO Sessions (locationID, startTime, sessionType) VALUES
(1, '2025-04-01 09:00:00', 'Training'),
(2, '2025-04-01 10:00:00', 'Game'),
(3, '2025-04-02 11:00:00', 'Training'),
(4, '2025-04-02 12:00:00', 'Game'),
(5, '2025-04-03 13:00:00', 'Training');

-- TeamFormations
INSERT INTO TeamFormations (teamName, score, sessionID) VALUES
('Team A', 3, 1),
('Team B', 2, 2),
('Team C', 5, 3),
('Team D', 4, 4),
('Team E', 6, 5);

-- FormationEnrollments
INSERT INTO FormationEnrollments (formationID, clubMemberNo, playerRole) VALUES
(1, 1, 'Outside Hitter'),
(2, 2, 'Setter'),
(3, 3, 'Libero'),
(4, 4, 'Opposite'),
(5, 5, 'Middle Blocker');

-- Contracts
INSERT INTO Contracts (locationID, personnelID, startDate, endDate, mandate, personnelRole) 
VALUES (1, 1, '2025-01-01', NULL, 'Paid', 'General Manager');

-- Payments
INSERT INTO Payments (clubMemberNo, paymentDate, method, amount) VALUES
(1, '2025-03-01', 'Credit', 150.00),
(2, '2025-03-15', 'Debit', 120.00),
(3, '2025-03-20', 'Cash', 100.00),
(4, '2025-03-25', 'Credit', 130.00),
(5, '2025-03-30', 'Debit', 110.00);

-- EmailLogs
INSERT INTO EmailLogs (senderID, recipientID, messageSubject, messageBody) VALUES
(1, 2, 'Training Update', 'New training session details available.'),
(2, 3, 'Tournament Details', 'Tournament information for next week.'),
(3, 4, 'Team Assignment', 'Your team has been assigned for the upcoming session.'),
(4, 5, 'General Update', 'General update on club activities this month.'),
(5, 6, 'Payment Confirmation', 'Your payment has been successfully processed.');


