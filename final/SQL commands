DROP DATABASE MYVC;
CREATE DATABASE MYVC;
USE MYVC;
CREATE TABLE Addresses (
	addressID INT AUTO_INCREMENT PRIMARY KEY,
	address VARCHAR(255) UNIQUE NOT NULL,
	city VARCHAR(100),
	province VARCHAR(100),
	postalCode VARCHAR(10)
);
CREATE TABLE People (
	generalID INT AUTO_INCREMENT PRIMARY KEY,
	sin VARCHAR(15) UNIQUE,
	medicareNo VARCHAR(15) UNIQUE,
	dob DATE,
	firstName VARCHAR(100),
	lastName VARCHAR(100),
	telephoneNo VARCHAR(15),
	email VARCHAR(100),
	addressID INT,
	FOREIGN KEY (addressID) REFERENCES Addresses(addressID)
);
CREATE TABLE Personnel (
	personnelID INT AUTO_INCREMENT PRIMARY KEY,
	generalID INT UNIQUE,
	FOREIGN KEY (generalID) REFERENCES People(generalID)
);
CREATE TABLE FamilyMembers (
	famMemberID INT AUTO_INCREMENT PRIMARY KEY,
	generalID INT UNIQUE,
	FOREIGN KEY (generalID) REFERENCES People(generalID)
);
CREATE TABLE SecondaryFamMembers (
	secondaryFamID INT AUTO_INCREMENT PRIMARY KEY,
	telephoneNo VARCHAR(15),
	firstName VARCHAR(100),
	lastName VARCHAR(100)
);
CREATE TABLE PrimFamSecFamRelationship (
	famMemberID INT PRIMARY KEY,
	secondaryFamID INT,
	FOREIGN KEY (famMemberID) REFERENCES FamilyMembers(famMemberID),
	FOREIGN KEY (secondaryFamID) REFERENCES SecondaryFamMembers(secondaryFamID)
);
CREATE TABLE ClubMembers (
	clubMemberNo INT AUTO_INCREMENT PRIMARY KEY,
	generalID INT UNIQUE,
	height INT,
	weight INT,
	gender ENUM('M', 'F'),
	FOREIGN KEY (generalID) REFERENCES People(generalID)
);
CREATE TABLE ClubMemFamRelationship (
	clubMemberNo INT PRIMARY KEY,
	famMemberID INT NOT NULL,
	relationship ENUM(
		'Mother',
		'Father',
		'Sibling',
		'Partner',
		'Tutor',
		'Friend',
		'Grandmother',
		'Grandfather',
		'Uncle',
		'Aunt',
		'Other'
	) NOT NULL,
	FOREIGN KEY (clubMemberNo) REFERENCES ClubMembers(clubMemberNo),
	FOREIGN KEY (famMemberID) REFERENCES FamilyMembers(famMemberID)
);
CREATE TABLE Locations (
	locationID INT AUTO_INCREMENT PRIMARY KEY,
	locationType ENUM('Head', 'Branch') NOT NULL,
	maxCapacity INT NOT NULL,
	locationName VARCHAR(100),
	addressID INT UNIQUE NOT NULL,
	telephoneNo VARCHAR(15),
	webAddress VARCHAR(100),
	FOREIGN KEY (addressID) REFERENCES Addresses(addressID)
);
CREATE TABLE PlayingAt (
	clubMemberNo INT PRIMARY KEY,
	locationID INT NOT NULL,
	FOREIGN KEY (clubMemberNo) REFERENCES ClubMembers(clubMemberNo),
	FOREIGN KEY (locationID) REFERENCES Locations(locationID)
);
CREATE TABLE Teams (
	teamName VARCHAR(100) PRIMARY KEY,
	captainMemberNo INT NOT NULL,
	locationID INT NOT NULL,
	gender ENUM('M', 'F') NOT NULL,
	FOREIGN KEY (captainMemberNo) REFERENCES ClubMembers(clubMemberNo),
	FOREIGN KEY (locationID) REFERENCES Locations(locationID)
);
CREATE TABLE Sessions (
	sessionID INT AUTO_INCREMENT PRIMARY KEY,
	locationID INT,
	startTime DATETIME,
	sessionType ENUM('Training', 'Game'),
	FOREIGN KEY (locationID) REFERENCES Locations(locationID)
);
CREATE TABLE TeamFormations (
	formationID INT AUTO_INCREMENT PRIMARY KEY,
	teamName VARCHAR(100) NOT NULL,
	score INT,
	sessionID INT NOT NULL,
	FOREIGN KEY (teamName) REFERENCES Teams(teamName),
	FOREIGN KEY (sessionID) REFERENCES Sessions(sessionID)
);
CREATE TABLE FormationEnrollments (
	formationID INT NOT NULL,
	clubMemberNo INT NOT NULL,
	playerRole ENUM(
		'Outside Hitter',
		'Opposite',
		'Setter',
		'Middle Blocker',
		'Libero',
		'Defensive Specialist',
		'Serving Specialist'
	),
	CONSTRAINT PK_Enrollments PRIMARY KEY (formationID, clubMemberNo),
	FOREIGN KEY (formationID) REFERENCES TeamFormations(formationID),
	FOREIGN KEY (clubMemberNo) REFERENCES ClubMembers(clubMemberNo)
);
CREATE TABLE Contracts (
	contractID INT AUTO_INCREMENT PRIMARY KEY,
	locationID INT NOT NULL,
	personnelID INT NOT NULL,
	startDate DATE NOT NULL,
	endDate DATE,
	mandate ENUM('Volunteer', 'Paid') NOT NULL,
	personnelRole ENUM(
		'General Manager',
		'Deputy Manager',
		'Administrator',
		'Coach',
		'Assisant Coach',
		'Other'
	),
	FOREIGN KEY (locationID) REFERENCES Locations(locationID),
	FOREIGN KEY (personnelID) REFERENCES Personnel(personnelID)
);
CREATE TABLE Payments (
	paymentID INT AUTO_INCREMENT PRIMARY KEY,
	clubMemberNo INT,
	-- not putting as not null to allow for donations w/o member
	paymentDate TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	method ENUM('Credit', 'Debit', 'Cash'),
	amount DECIMAL(10, 2),
	FOREIGN KEY (clubMemberNo) REFERENCES ClubMembers(clubMemberNo)
);
CREATE TABLE EmailLogs (
	emailID INT AUTO_INCREMENT PRIMARY KEY,
	senderID INT NOT NULL,
	recipientID INT NOT NULL,
	messageSubject VARCHAR(100) NOT NULL,
	sendDate TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	messageBody VARCHAR(100) NOT NULL,
	FOREIGN KEY (senderID) REFERENCES People(generalID),
	FOREIGN KEY (recipientID) REFERENCES People(generalID)
);








The trigger will ensure that SSNs are unique across both Personnel and FamilyMembers tables.
DELIMITER $$

CREATE TRIGGER check_ssn_unique
BEFORE INSERT ON People
FOR EACH ROW
BEGIN
    -- Check if SSN is already used by any personnel or family member
    IF EXISTS (SELECT 1 FROM Personnel WHERE sin = NEW.sin) OR EXISTS (SELECT 1 FROM FamilyMembers WHERE sin = NEW.sin) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'SSN is already in use for another member.';
    END IF;
END$$

DELIMITER ;


This trigger checks if there is already a location marked as the "Head" location before inserting a new one.
DELIMITER $$

CREATE TRIGGER check_head_location
BEFORE INSERT ON Locations
FOR EACH ROW
BEGIN
    -- If the new location is 'Head', ensure only one exists
    IF NEW.locationType = 'Head' THEN
        IF EXISTS (SELECT 1 FROM Locations WHERE locationType = 'Head') THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Only one Head location is allowed.';
        END IF;
    END IF;
END$$

DELIMITER ;



This trigger checks if the club has at least one head location, a general manager, and an administrator.
DELIMITER $$

CREATE TRIGGER check_club_operational
BEFORE INSERT ON Locations
FOR EACH ROW
BEGIN
    -- Check if there's a Head location
    IF NEW.locationType = 'Head' THEN
        -- Ensure that a General Manager exists
        IF NOT EXISTS (SELECT 1 FROM Personnel WHERE personnelRole = 'General Manager' AND locationID = NEW.locationID) THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'A General Manager is required for the Head location.';
        END IF;

        -- Ensure at least one administrator exists
        IF NOT EXISTS (SELECT 1 FROM Personnel WHERE personnelRole = 'Administrator' AND locationID = NEW.locationID) THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'At least one Administrator is required for the Head location.';
        END IF;
    END IF;
END$$

DELIMITER ;


This stored procedure removes family members who no longer have any associated club members.
DELIMITER $$

CREATE PROCEDURE remove_unlinked_family_members()
BEGIN
    DELETE FROM FamilyMembers
    WHERE famMemberID NOT IN (SELECT famMemberID FROM ClubMemFamRelationship);
END$$

DELIMITER ;


This procedure will find members who have not paid their full fees.
DELIMITER $$

CREATE PROCEDURE find_members_not_in_good_standing()
BEGIN
    SELECT cm.clubMemberNo, cm.firstName, cm.lastName
    FROM ClubMembers cm
    LEFT JOIN Payments p ON cm.clubMemberNo = p.clubMemberNo
    GROUP BY cm.clubMemberNo
    HAVING SUM(p.amount) < 100;
END$$

DELIMITER ;



This procedure creates a new activity (game or training) for a location, ensuring the club is operational.
DELIMITER $$

CREATE PROCEDURE create_new_activity(
    IN locationID INT,
    IN sessionType ENUM('Training', 'Game'),
    IN startTime DATETIME
)
BEGIN
    -- Ensure the club can operate
    IF NOT EXISTS (SELECT 1 FROM Locations WHERE locationID = locationID AND locationType = 'Head') THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'No valid head location found for the club.';
    END IF;

    INSERT INTO Sessions (locationID, startTime, sessionType)
    VALUES (locationID, startTime, sessionType);
END$$

DELIMITER ;




This procedure registers a club member for an activity.
DELIMITER $$

CREATE PROCEDURE register_member_in_activity(
    IN clubMemberNo INT,
    IN sessionID INT
)
BEGIN
    -- Ensure the member is active
    IF (SELECT status FROM ClubMembers WHERE clubMemberNo = clubMemberNo) != 'Active' THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Member is not active and cannot be registered for this activity.';
    END IF;

    -- Check if the activity date has passed
    IF (SELECT startTime FROM Sessions WHERE sessionID = sessionID) < CURDATE() THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Cannot register: activity date has already passed.';
    END IF;

    -- Proceed with registration
    INSERT INTO FormationEnrollments (formationID, clubMemberNo)
    VALUES (sessionID, clubMemberNo);
END$$

DELIMITER ;



This procedure creates a new contract and ends any existing contracts.
DELIMITER $$

CREATE PROCEDURE create_contract_for_personnel(
    IN personnelID INT,
    IN locationID INT,
    IN startDate DATE,
    IN mandate ENUM('Volunteer', 'Paid'),
    IN personnelRole ENUM('General Manager', 'Deputy Manager', 'Administrator', 'Coach', 'Assistant Coach', 'Other')
)
BEGIN
    -- End any existing active contracts for the personnel
    UPDATE Contracts
    SET endDate = CURDATE()
    WHERE personnelID = personnelID AND endDate IS NULL;

    -- Insert the new contract
    INSERT INTO Contracts (locationID, personnelID, startDate, mandate, personnelRole)
    VALUES (locationID, personnelID, startDate, mandate, personnelRole);
END$$

DELIMITER ;



This procedure terminates all active contracts for a specific personnel.
DELIMITER $$

CREATE PROCEDURE terminate_all_active_contracts(
    IN personnelID INT
)
BEGIN
    UPDATE Contracts
    SET endDate = CURDATE()
    WHERE personnelID = personnelID AND endDate IS NULL;
END$$

DELIMITER ;










-- Addresses
INSERT INTO Addresses (address, city, province, postalCode) VALUES
('123 Main St', 'Montreal', 'Quebec', 'H1A 1A1'),
('456 Elm St', 'Laval', 'Quebec', 'H2B 2B2'),
('789 Oak St', 'Montreal', 'Quebec', 'H3C 3C3'),
('101 Pine St', 'Quebec City', 'Quebec', 'G1A 1A1'),
('202 Maple St', 'Longueuil', 'Quebec', 'J4K 2B3'),
('303 Birch St', 'Montreal', 'Quebec', 'H4E 4E4'),
('404 Cedar St', 'Laval', 'Quebec', 'H7L 5N9'),
('505 Cherry St', 'Quebec City', 'Quebec', 'G2E 5E5'),
('606 Walnut St', 'Trois-Rivières', 'Quebec', 'G9A 6A6'),
('707 Pine Ave', 'Sherbrooke', 'Quebec', 'J1H 7T7');

-- People
INSERT INTO People (sin, medicareNo, dob, firstName, lastName, telephoneNo, email, addressID) VALUES
('123-45-6789', 'M123456789', '1980-04-12', 'John', 'Doe', '514-123-4567', 'john.doe@email.com', 1),
('987-65-4321', 'M987654321', '1990-06-22', 'Jane', 'Smith', '450-987-6543', 'jane.smith@email.com', 2),
('555-22-6677', 'M555667788', '1985-09-15', 'Mark', 'Johnson', '514-222-3333', 'mark.johnson@email.com', 3),
('666-33-7788', 'M667788990', '1995-11-04', 'Alice', 'Brown', '514-333-4444', 'alice.brown@email.com', 4),
('777-44-8899', 'M778899112', '1987-02-17', 'David', 'Davis', '450-444-5555', 'david.davis@email.com', 5),
('888-55-9900', 'M889900223', '2000-03-25', 'Sophia', 'Williams', '514-555-6666', 'sophia.williams@email.com', 6),
('999-66-0001', 'M990011334', '1998-01-10', 'Benjamin', 'Miller', '450-666-7777', 'benjamin.miller@email.com', 7),
('000-77-1112', 'M000223445', '1992-07-30', 'Emily', 'Davis', '514-777-8888', 'emily.davis@email.com', 8),
('111-88-2223', 'M112233556', '1988-05-19', 'Charles', 'Garcia', '450-888-9999', 'charles.garcia@email.com', 9),
('222-99-3334', 'M223344667', '2001-09-12', 'Olivia', 'Martinez', '514-999-0000', 'olivia.martinez@email.com', 10);

-- Personnel
INSERT INTO Personnel (generalID) VALUES
(1), (2), (3), (4), (5);

-- FamilyMembers
INSERT INTO FamilyMembers (generalID) VALUES
(6), (7), (8), (9), (10);

-- SecondaryFamMembers
INSERT INTO SecondaryFamMembers (telephoneNo, firstName, lastName) VALUES
('514-123-4567', 'Lucas', 'Brown'),
('450-987-6543', 'Megan', 'Smith'),
('514-222-3333', 'Oliver', 'Johnson'),
('514-333-4444', 'Sarah', 'Brown'),
('450-444-5555', 'Chris', 'Davis');

-- PrimFamSecFamRelationship
INSERT INTO PrimFamSecFamRelationship (famMemberID, secondaryFamID) VALUES
(1, 1), (2, 2), (3, 3), (4, 4), (5, 5);

-- ClubMembers
INSERT INTO ClubMembers (generalID, height, weight, gender) VALUES
(1, 160, 55, 'M'),
(2, 170, 60, 'F'),
(3, 180, 75, 'M'),
(4, 165, 50, 'F'),
(5, 175, 68, 'M');

-- ClubMemFamRelationship
INSERT INTO ClubMemFamRelationship (clubMemberNo, famMemberID, relationship) VALUES
(1, 1, 'Mother'),
(2, 2, 'Father'),
(3, 3, 'Sibling'),
(4, 4, 'Partner'),
(5, 5, 'Friend');

-- Locations
INSERT INTO Locations (locationType, maxCapacity, locationName, addressID, telephoneNo, webAddress) VALUES
('Head', 100, 'Head Office', 1, '514-123-4567', 'www.myvc-head.com'),
('Branch', 50, 'Laval Branch', 2, '450-987-6543', 'www.myvc-laval.com'),
('Branch', 60, 'Montreal East Branch', 3, '514-222-3333', 'www.myvc-east.com'),
('Branch', 80, 'Quebec City Branch', 4, '450-444-5555', 'www.myvc-qc.com'),
('Branch', 70, 'Sherbrooke Branch', 5, '514-555-6666', 'www.myvc-sherbrooke.com');

-- PlayingAt
INSERT INTO PlayingAt (clubMemberNo, locationID) VALUES
(1, 1), (2, 2), (3, 3), (4, 4), (5, 5);

-- Teams
INSERT INTO Teams (teamName, captainMemberNo, locationID, gender) VALUES
('Team A', 1, 1, 'M'),
('Team B', 2, 2, 'F'),
('Team C', 3, 3, 'M'),
('Team D', 4, 4, 'F'),
('Team E', 5, 5, 'M');

-- Sessions
INSERT INTO Sessions (locationID, startTime, sessionType) VALUES
(1, '2025-04-01 09:00:00', 'Training'),
(2, '2025-04-01 10:00:00', 'Game'),
(3, '2025-04-02 11:00:00', 'Training'),
(4, '2025-04-02 12:00:00', 'Game'),
(5, '2025-04-03 13:00:00', 'Training');

-- TeamFormations
INSERT INTO TeamFormations (teamName, score, sessionID) VALUES
('Team A', 3, 1),
('Team B', 2, 2),
('Team C', 5, 3),
('Team D', 4, 4),
('Team E', 6, 5);

-- FormationEnrollments
INSERT INTO FormationEnrollments (formationID, clubMemberNo, playerRole) VALUES
(1, 1, 'Outside Hitter'),
(2, 2, 'Setter'),
(3, 3, 'Libero'),
(4, 4, 'Opposite'),
(5, 5, 'Middle Blocker');

-- Contracts
INSERT INTO Contracts (locationID, personnelID, startDate, endDate, mandate, personnelRole) 
VALUES (1, 1, '2025-01-01', NULL, 'Paid', 'General Manager');

-- Payments
INSERT INTO Payments (clubMemberNo, paymentDate, method, amount) VALUES
(1, '2025-03-01', 'Credit', 150.00),
(2, '2025-03-15', 'Debit', 120.00),
(3, '2025-03-20', 'Cash', 100.00),
(4, '2025-03-25', 'Credit', 130.00),
(5, '2025-03-30', 'Debit', 110.00);

-- EmailLogs
INSERT INTO EmailLogs (senderID, recipientID, messageSubject, messageBody) VALUES
(1, 2, 'Training Update', 'New training session details available.'),
(2, 3, 'Tournament Details', 'Tournament information for next week.'),
(3, 4, 'Team Assignment', 'Your team has been assigned for the upcoming session.'),
(4, 5, 'General Update', 'General update on club activities this month.'),
(5, 6, 'Payment Confirmation', 'Your payment has been successfully processed.');


